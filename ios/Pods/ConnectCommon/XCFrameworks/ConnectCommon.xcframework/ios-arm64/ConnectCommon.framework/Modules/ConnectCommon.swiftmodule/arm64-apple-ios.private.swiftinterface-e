// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ConnectCommon
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
import Base58_swift
import BigInt
import CommonCrypto
import CryptoSwift
import Foundation
import ParticleNetworkBase
import RxAlamofire
import RxSwift
import Swift
import SwiftyJSON
import TweetNacl
import UIKit
import _Concurrency
import _StringProcessing
import secp256k1
public protocol KeystoreUtilProtocol {
  static func encode(privateKey: Foundation.Data, password: Swift.String) throws -> Foundation.Data
  static func decode(data: Foundation.Data, password: Swift.String) throws -> Foundation.Data
}
public enum KeystoreUtilError : Foundation.LocalizedError {
  case corruptedKeystore
  case decodeFailed
  case encodeFailed
  case unknown
  public static func == (a: ConnectCommon.KeystoreUtilError, b: ConnectCommon.KeystoreUtilError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeystoreUtil : ConnectCommon.KeystoreUtilProtocol {
  public static func encode(privateKey: Foundation.Data, password: Swift.String) throws -> Foundation.Data
  public static func encode(privateKey: Foundation.Data, password: Swift.String, salt: Foundation.Data, iv: Foundation.Data) throws -> Foundation.Data
  public static func decode(data: Foundation.Data, password: Swift.String) throws -> Foundation.Data
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HexUtil {
  public static func byteArray(fromHex string: Swift.String) throws -> [Swift.UInt8]
  @objc deinit
}
public protocol ParticleAdapter {
  func getUserInfo() -> ParticleNetworkBase.UserInfo?
  func openAccountAndSecurity() -> RxSwift.Single<Swift.Void>
  func openWebWallet(styleJsonString: Swift.String?)
  func switchChain(_ chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo) -> RxSwift.Single<ParticleNetworkBase.UserInfo?>
}
public struct DAppMetaData {
  public let name: Swift.String
  public let icon: Foundation.URL
  public let url: Foundation.URL
  public let description: Swift.String?
  public static let standard: ConnectCommon.DAppMetaData
  public init(name: Swift.String, icon: Foundation.URL, url: Foundation.URL, description: Swift.String?)
}
public struct AdapterInfo : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public let name: Swift.String
  public let url: Swift.String
  public let icon: Swift.String
  public let redirectUrlHost: Swift.String
  public let supportChains: [ParticleNetworkBase.ChainType]
  public let deepLink: Swift.String
  public let scheme: Swift.String
  public init(name: Swift.String, url: Swift.String, icon: Swift.String, redirectUrlHost: Swift.String, supportChains: [ParticleNetworkBase.ChainType], deepLink: Swift.String, scheme: Swift.String)
  public static func == (a: ConnectCommon.AdapterInfo, b: ConnectCommon.AdapterInfo) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum WalletType : Swift.Codable, Swift.Equatable, Swift.Hashable {
  case particle
  case authCore
  case evmPrivateKey
  case solanaPrivateKey
  case metaMask
  case rainbow
  case walletConnect
  case trust
  case phantom
  case imtoken
  case bitkeep
  case zerion
  case math
  case omni
  case inch1
  case zengo
  case alpha
  case okx
  case custom(info: ConnectCommon.AdapterInfo)
  public var stringValue: Swift.String {
    get
  }
  public static func == (lhs: ConnectCommon.WalletType, rhs: ConnectCommon.WalletType) -> Swift.Bool
  public var info: ConnectCommon.AdapterInfo {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
public enum Wordlists {
  public static let english: [Swift.String]
}
public struct SiweMessage : Swift.Hashable {
  public var domain: Swift.String
  public var address: Swift.String
  public var statement: Swift.String?
  public var uri: Foundation.URL
  public var version: Swift.String
  public var chainId: Swift.Int
  public var nonce: Swift.String
  public var issuedAt: Foundation.Date
  public var expirationTime: Foundation.Date?
  public var notBefore: Foundation.Date?
  public var requestId: Swift.String?
  public var resources: [Foundation.URL]?
  public init(domain: Swift.String, address: Swift.String, uri: Foundation.URL) throws
  public init(domain: Swift.String, address: Swift.String, statement: Swift.String?, uri: Foundation.URL, version: Swift.String, chainId: Swift.Int, nonce: Swift.String, issuedAt: Foundation.Date, expirationTime: Foundation.Date?, notBefore: Foundation.Date?, requestId: Swift.String?, resources: [Foundation.URL]?) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ConnectCommon.SiweMessage, b: ConnectCommon.SiweMessage) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class ParticleAuthConfig : ConnectCommon.ConnectConfig {
  public var loginType: ParticleNetworkBase.LoginType
  public var supportAuthType: [ParticleNetworkBase.SupportAuthType]
  public var phoneOrEmailAccount: Swift.String?
  public var socialLoginPrompt: ParticleNetworkBase.SocialLoginPrompt?
  public var authorization: ParticleNetworkBase.LoginAuthorization?
  public init(loginType: ParticleNetworkBase.LoginType = .email, supportAuthType: [ParticleNetworkBase.SupportAuthType] = [SupportAuthType.all], phoneOrEmailAccount: Swift.String? = nil, socialLoginPrompt: ParticleNetworkBase.SocialLoginPrompt? = nil, authorization: ParticleNetworkBase.LoginAuthorization? = nil)
  @objc deinit
}
public protocol ConnectAdapter {
  var walletType: ConnectCommon.WalletType { get }
  var readyState: ConnectCommon.WalletReadyState { get }
  func getAccounts() -> [ConnectCommon.Account]
  func getSmartAccounts(chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<[ParticleNetworkBase.AA.SmartAccountInfo]>
  func connect<T>(_ config: T?) -> RxSwift.Single<ConnectCommon.Account?> where T : ConnectCommon.ConnectConfig
  func login(config: ConnectCommon.SiweMessage, publicAddress: Swift.String) -> RxSwift.Single<(Swift.String, Swift.String)>
  func verify(message: ConnectCommon.SiweMessage, against signature: Swift.String) -> RxSwift.Single<Swift.Bool>
  func isConnected(publicAddress: Swift.String) -> Swift.Bool
  func disconnect(publicAddress: Swift.String) -> RxSwift.Single<Swift.String>
  func signAndSendTransaction(publicAddress: Swift.String, transaction: Swift.String) -> RxSwift.Single<Swift.String>
  func signAndSendTransaction(publicAddress: Swift.String, transaction: Swift.String, feeMode: ParticleNetworkBase.AA.FeeMode, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  func signAllTransactions(publicAddress: Swift.String, transactions: [Swift.String]) -> RxSwift.Single<[Swift.String]>
  func signAllTransactions(publicAddress: Swift.String, transactions: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<[Swift.String]>
  func signTransaction(publicAddress: Swift.String, transaction: Swift.String) -> RxSwift.Single<Swift.String>
  func signTransaction(publicAddress: Swift.String, transaction: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  func signMessage(publicAddress: Swift.String, message: Swift.String) -> RxSwift.Single<Swift.String>
  func signMessage(publicAddress: Swift.String, message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  func signTypedData(publicAddress: Swift.String, data: Swift.String) -> RxSwift.Single<Swift.String>
  func signTypedData(publicAddress: Swift.String, data: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  func handleUrl(_ url: Foundation.URL) -> Swift.Bool
  func request(publicAddress: Swift.String, method: Swift.String, parameters: [Swift.Encodable]) -> RxSwift.Single<SwiftyJSON.JSON?>
}
extension ConnectCommon.ConnectAdapter {
  public func getSmartAccounts(chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<[ParticleNetworkBase.AA.SmartAccountInfo]>
  public func signAndSendTransaction(publicAddress: Swift.String, transaction: Swift.String) -> RxSwift.Single<Swift.String>
  public func signTransaction(publicAddress: Swift.String, transaction: Swift.String) -> RxSwift.Single<Swift.String>
  public func signAllTransactions(publicAddress: Swift.String, transactions: [Swift.String]) -> RxSwift.Single<[Swift.String]>
  public func signMessage(publicAddress: Swift.String, message: Swift.String) -> RxSwift.Single<Swift.String>
  public func signTypedData(publicAddress: Swift.String, data: Swift.String) -> RxSwift.Single<Swift.String>
  public func login(config: ConnectCommon.SiweMessage, publicAddress: Swift.String) -> RxSwift.Single<(Swift.String, Swift.String)>
  public func verify(message: ConnectCommon.SiweMessage, against signature: Swift.String) -> RxSwift.Single<Swift.Bool>
}
public struct NativeCurrency : Swift.Codable {
  public let name: Swift.String
  public let symbol: Swift.String
  public let decimals: Swift.UInt8
  public init(name: Swift.String, symbol: Swift.String, decimals: Swift.UInt8)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class AppUtils {
  public static func isAppInstalled(scheme: Swift.String) -> Swift.Bool
  @objc deinit
}
public enum ConnectError : Swift.Error, Swift.CustomStringConvertible {
  case disconnected
  case unauthorized
  case rejected
  case params
  case unSupportMethod
  case unSupportChain
  case custom(Swift.Int?, Swift.String?)
  public var code: Swift.Int? {
    get
  }
  public var message: Swift.String? {
    get
  }
  public var description: Swift.String {
    get
  }
  public var localizedDescription: Swift.String {
    get
  }
}
extension ConnectCommon.SiweMessage : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Account : Swift.Codable {
  public let publicAddress: Swift.String
  public let name: Swift.String?
  public let url: Swift.String?
  public let icons: [Swift.String]
  public let description: Swift.String?
  public let mnemonic: Swift.String?
  public let walletType: ConnectCommon.WalletType
  public var smartAccount: ParticleNetworkBase.AA.SmartAccountInfo?
  public init(publicAddress: Swift.String, name: Swift.String?, url: Swift.String?, icons: [Swift.String], description: Swift.String?, mnemonic: Swift.String?, walletType: ConnectCommon.WalletType)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ParticleConnectNotification {
  public static let walletConnectSessionDelete: Swift.String
}
public struct WalletName {
  public var name: Swift.String
  public var icon: Swift.String
  public init(name: Swift.String, icon: Swift.String)
}
extension Foundation.Data {
  public static func randomOfLength(_ length: Swift.Int) -> Foundation.Data?
  public var hexString: Swift.String {
    get
  }
}
public enum KeyUtilError : Swift.Error {
  case invalidContext
  case privateKeyInvalid
  case unknownError
  case signatureFailure
  case signatureParseFailure
  case badArguments
  public static func == (a: ConnectCommon.KeyUtilError, b: ConnectCommon.KeyUtilError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeyUtil {
  public static func generatePrivateKeyData() -> Foundation.Data?
  public static func generatePublicKey(from privateKey: Foundation.Data) throws -> Foundation.Data
  public static func generateAddress(from publicKey: Foundation.Data) -> ConnectCommon.EthereumAddress
  public static func sign(message: Foundation.Data, with privateKey: Foundation.Data, hashing: Swift.Bool) throws -> Foundation.Data
  public static func recoverPublicKey(message: Foundation.Data, signature: Foundation.Data) throws -> Swift.String
  @objc deinit
}
public class Mnemonic {
  public enum Error : Swift.Error {
    case invalidMnemonic
    case invalidEntropy
    public static func == (a: ConnectCommon.Mnemonic.Error, b: ConnectCommon.Mnemonic.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let phrase: [Swift.String]
  public init(strength: Swift.Int = 256, wordlist: [Swift.String] = Wordlists.english)
  public init(phrase: [Swift.String], passphrase: Swift.String = "") throws
  public init(entropy: [Swift.UInt8], wordlist: [Swift.String] = Wordlists.english) throws
  public static func toMnemonic(_ bytes: [Swift.UInt8], wordlist: [Swift.String] = Wordlists.english) throws -> [Swift.String]
  public static func toEntropy(_ phrase: [Swift.String], wordlist: [Swift.String] = Wordlists.english) throws -> [Swift.UInt8]
  public static func isValid(phrase: [Swift.String], wordlist: [Swift.String] = Wordlists.english) -> Swift.Bool
  public static func deriveChecksumBits(_ bytes: [Swift.UInt8]) -> Swift.String
  public var seed: [Swift.UInt8] {
    get
  }
  @objc deinit
}
extension ConnectCommon.Mnemonic : Swift.Equatable {
  public static func == (lhs: ConnectCommon.Mnemonic, rhs: ConnectCommon.Mnemonic) -> Swift.Bool
}
public enum WalletReadyState {
  case installed
  case notDetected
  case loadable
  case unsupported
  case undetectable
  public static func == (a: ConnectCommon.WalletReadyState, b: ConnectCommon.WalletReadyState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class ConnectConfig {
  public static var none: ConnectCommon.ConnectConfig
  public init()
  @objc deinit
}
public struct EthereumAddress : Swift.Codable, Swift.Hashable {
  public let value: Swift.String
  public init(_ value: Swift.String)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: ConnectCommon.EthereumAddress, rhs: ConnectCommon.EthereumAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ConnectCommon.EthereumAddress : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension ConnectCommon.SiweMessage : Swift.CustomStringConvertible {
  public static let dateFormatter: Foundation.DateFormatter
  public var description: Swift.String {
    get
  }
  public init(_ description: Swift.String) throws
}
public enum RpcUrl {
  public static let evm: Swift.String
  public static let solana: Swift.String
}
public class APIService {
  public init(rpcUrl: Swift.String)
  public func request<T>(httpMethod: Alamofire.HTTPMethod = .post, method: Swift.String, parameters: [Swift.Encodable?] = []) -> RxSwift.Single<ParticleNetworkBase.Response<T>> where T : Swift.Decodable
  @objc deinit
}
public enum ConnectManager {
  public static func getWalletConnectV2ProjectId() -> Swift.String
  public static func setWalletConnectV2ProjectId(_ id: Swift.String)
  public static func setWalletConnectV2SupportChainInfos(_ chainInfos: [ParticleNetworkBase.ParticleNetwork.ChainInfo])
  public static func getWalletConnectV2SupportChainInfos() -> [ParticleNetworkBase.ParticleNetwork.ChainInfo]
  public static func getChainId() -> Swift.Int
  public static var aaService: ParticleNetworkBase.AAServiceProtocol? {
    get
  }
  public static func setScheme(_ scheme: Swift.String, dAppData: ConnectCommon.DAppMetaData)
  public static func getScheme() -> Swift.String
  public static func getDAppData() -> ConnectCommon.DAppMetaData
  public static func setMoreAdapters(_ moreAdapters: [ConnectCommon.ConnectAdapter])
  public static func getMoreAdapters() -> [ConnectCommon.ConnectAdapter]
  public static func setCustomWalletName(walletType: ConnectCommon.WalletType, name: ConnectCommon.WalletName)
  public static func getCustomWalletName() -> [ConnectCommon.WalletType : ConnectCommon.WalletName]
  public static func activeLog(publicAddress: Swift.String?, activeLoginType: ParticleNetworkBase.Logger.ActiveLoginType, activeActionType: ParticleNetworkBase.Logger.ActiveActionType, userInfo: Swift.String? = nil)
  public static func activeLogParticle(identity: Swift.String, publicAddress: Swift.String?, activeLoginType: ParticleNetworkBase.Logger.ActiveLoginType, activeActionType: ParticleNetworkBase.Logger.ActiveActionType, userInfo: Swift.String? = nil)
}
public struct Crypto {
  public static func randomKey(count: Swift.Int = 32) throws -> Foundation.Data
  public static func randomKey(count: Swift.Int = 32) throws -> Swift.String
}
public protocol LocalAdapter {
  func importWalletFromPrivateKey(_ privateKey: Swift.String) -> RxSwift.Single<ConnectCommon.Account?>
  func importWalletFromMnemonic(_ mnemonic: Swift.String) -> RxSwift.Single<ConnectCommon.Account?>
  func exportWalletPrivateKey(publicAddress: Swift.String) -> RxSwift.Single<Swift.String?>
}
extension ConnectCommon.KeystoreUtilError : Swift.Equatable {}
extension ConnectCommon.KeystoreUtilError : Swift.Hashable {}
extension ConnectCommon.KeyUtilError : Swift.Equatable {}
extension ConnectCommon.KeyUtilError : Swift.Hashable {}
extension ConnectCommon.Mnemonic.Error : Swift.Equatable {}
extension ConnectCommon.Mnemonic.Error : Swift.Hashable {}
extension ConnectCommon.WalletReadyState : Swift.Equatable {}
extension ConnectCommon.WalletReadyState : Swift.Hashable {}

// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name ConnectWalletConnectAdapter
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreImage.CIFilterBuiltins
import Combine
import ConnectCommon
import CoreImage
import CryptoSwift
import Foundation
import ParticleNetworkBase
import RxCocoa
import RxSwift
import SDWebImage
import SDWebImageWebPCoder
import SnapKit
import Starscream
import Swift
import SwiftMessages
import SwiftyJSON
import SwiftyUserDefaults
import UIKit
import WalletConnectSwiftV2
import _Concurrency
import _StringProcessing
public struct EthereumTransaction : Swift.Codable {
  public var from: Swift.String
  public var to: Swift.String?
  public var data: Swift.String
  public var gas: Swift.String?
  public var gasPrice: Swift.String?
  public var value: Swift.String?
  public var nonce: Swift.String?
  public var type: Swift.String?
  public var accessList: [EthereumTransaction.AccessListItem]?
  public var chainId: Swift.String?
  public var maxPriorityFeePerGas: Swift.String?
  public var maxFeePerGas: Swift.String?
  public struct AccessListItem : Swift.Codable {
    public var address: Swift.String
    public var storageKeys: [Swift.String]
    public init(address: Swift.String, storageKeys: [Swift.String])
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public init(from: Swift.String, to: Swift.String?, data: Swift.String, gas: Swift.String?, gasPrice: Swift.String?, value: Swift.String?, nonce: Swift.String?, type: Swift.String?, accessList: [EthereumTransaction.AccessListItem]?, chainId: Swift.String?, maxPriorityFeePerGas: Swift.String?, maxFeePerGas: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers public class ZerionConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class MathConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class OmniConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class Inch1ConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class ZengoConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class AlphaConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class OKXConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class BitkeepConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class MetaMaskConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
open class WalletConnectAdapter : ConnectCommon.ConnectAdapter {
  open var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  open var readyState: ConnectCommon.WalletReadyState {
    get
  }
  public func getAccounts() -> [ConnectCommon.Account]
  public func connect<T>(_ config: T? = nil) -> RxSwift.Single<ConnectCommon.Account?> where T : ConnectCommon.ConnectConfig
  public func isConnected(publicAddress: Swift.String) -> Swift.Bool
  public func disconnect(publicAddress: Swift.String) -> RxSwift.Single<Swift.String>
  public func signAndSendTransaction(publicAddress: Swift.String, transaction: Swift.String, feeMode: ParticleNetworkBase.AA.FeeMode, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  public func signAllTransactions(publicAddress: Swift.String, transactions: [Swift.String], chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<[Swift.String]>
  public func signTransaction(publicAddress: Swift.String, transaction: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  public func signMessage(publicAddress: Swift.String, message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  public func handleUrl(_ url: Foundation.URL) -> Swift.Bool
  public func signTypedData(publicAddress: Swift.String, data: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  #if compiler(>=5.3) && $AsyncAwait
  public func getConnectionUrl() async throws -> (Swift.String, RxSwift.Single<ConnectCommon.Account?>)
  #endif
  public func request(publicAddress: Swift.String, method: Swift.String, parameters: [Swift.Encodable]) -> RxSwift.Single<SwiftyJSON.JSON?>
  public func extendConnection(publicAddress: Swift.String)
  @objc deinit
}
extension WalletConnectAdapter : ParticleNetworkBase.MessageSigner {
  public func signMessage(_ message: Swift.String, chainInfo: ParticleNetworkBase.ParticleNetwork.ChainInfo?) -> RxSwift.Single<Swift.String>
  public func getEoaAddress() -> Swift.String
}
@_inheritsConvenienceInitializers public class ImtokenConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class TrustConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class RainbowConnectAdapter : WalletConnectAdapter {
  override public var walletType: ConnectCommon.WalletType {
    get
  }
  required public init()
  @objc deinit
}
extension Starscream.WebSocket : WalletConnectSwiftV2.WebSocketConnecting {
}
